<% function renderFields(fields){ %>
    <% fields.forEach(function(field){ %>
    <% if(field.type != 'grid' && field.type != 'table' && 
        field.type != 'address' && field.type != 'header'  && 
        field.type != 'relationship'){ %>
    <%= field.name %>: { type: 'string', nullable: true },
    <% } else if(field.type == 'relationship'){ %>
    id_<%= field.name %>: { type: 'integer', nullable: true },
    //<%= field.name %>: {
    //  oneOf: [{ type: 'integer' }, { $ref: '#/schemas/<%= field.name %>' }],
    //},
    <% } else if(field.type == 'grid'){ %>  
    <%= renderFields(field.fields) %>
    <% } else { %>  
    //TODO: field de um tipo n√£o suportado: <%= field.name %> > <%= field.type %>
    <% } %>
    <% }); %>
<% } %>
const lodash = require('lodash');
const assert = require('assert');
const Ajv = require('ajv');
const addFormats = require('ajv-formats').default;

<% screens.forEach(function(screen){ %>
const schema<%= screen.entity %> = {
  $id: '#/schemas/avaliacao-diagnostica',
  type: 'object',
  properties: {
    id: { type: 'integer' },
    <%= renderFields(screen.fields) %>
    dataCadastro: { type: 'string', format: 'date-time' },
    dataAlteracao: { type: 'string', format: 'date-time' },
    dataExclusao: { type: 'string', nullable: true, format: 'date-time' },
    //endereco: { $ref: '#/schemas/endereco' },
  },
  required: [
    //'resumo',
  ],
  additionalProperties: false,
};
<% }); %>
const ajv = new Ajv({
  allErrors: true,
  schemas: [
    <% screens.forEach(function(screen){ %>
    schema<%= screen.entity %>,
    <% }); %>
  ],
});

addFormats(ajv);

const assertAtributos = {

  <% screens.forEach(function(screen){ %>
  validar<%= screen.entity %>(<%= screen.name %>) {
    const validate = ajv.compile(schema<%= screen.entity %>);
    const valid = validate(<%= screen.name %>);
    if (valid) {
      return [];
    }
    return validate.errors;
  },
  <% }); %>
};

module.exports = assertAtributos;
